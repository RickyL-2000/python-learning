"""
描述
李华是北京大学的学生。这个学期，他选了 25 学分的课程，每周都有很多任务，每个任务都有一个截止日期。李华决定每天都留出 6 小时用来完成一定量的课程任务，按照任务的截止日期安排，截止日期早的安排在前面，截止日期晚的安排在后面。

李华希望每天完成尽量多的任务，但不希望把同一项任务分到两天完成，如果当天剩余的时间对于下一项任务不够用了，他会把这项任务留到下一天。例如，若当天只剩一小时，剩下的任务要两小时才能完成，他会选择把这项任务留到第二天再完成，当天剩下的时间用来休息。

李华听说用计算机程序可以很方便地排出日程，但因为任务太多，自己没有时间写代码。你可以帮李华完成这个程序吗？

输入
输入的前 N 行是 N 项任务的描述（0 < N < 100 000），每项任务对应一行，格式是“名称 截止日期 所需小时数”（不含引号，名称中不含空格）。截止日期是 yyyy-mm-dd 的格式（如2021-09-09 不写 2021-9-9）。所需小时数可以是整数或者小数（不会超过 6）。如“计概作业 2021-10-16 0.5”。第 (N + 1) 行是“end”，表示任务到这里就列举完了。

注意，可能有一些任务名称相同，但截止日期不同。比如有十月十六号的计概作业，可能也有十月二十三号的计概作业，名称都是“计概作业”。也会有截止日期相同，但不同名的任务，比如某一次计概作业和线代作业在同一天截止。我们假设李华不存在重复输入，即输入中不存在任务名称和截止日期都相同的任务。
输出
输出李华每天的安排。对于第 k 天的安排，先输出一行“Day k”，之后的每一行是这一天要完成的一项任务的名称（按先后顺序输出），最后输出 20 个连字符“-”。

对于截止日期相同的不同任务，我们把先输入的安排在前面，后输入的安排在后面。
样例输入
计概作业 2021-10-16 0.5
数分作业 2021-10-12 4.5
高代作业 2021-10-16 5
思修pre 2021-10-12 3
数分复习 2021-10-31 6
数分作业 2021-10-19 5.5
end
样例输出
Day 1
数分作业
--------------------
Day 2
思修pre
计概作业
--------------------
Day 3
高代作业
--------------------
Day 4
数分作业
--------------------
Day 5
数分复习
--------------------
"""

tasks = []
schedule = []
while True:
    msg = input()
    if msg == "end":
        break
    msg = msg.strip().split()
    time = msg[1].split('-')
    time = (int(time[0]) - 2000) * 365 + int(time[1]) * 30 + int(time[2])
    tasks.append((msg[0], time, float(msg[2])))   # (name, date, time)

tasks = sorted(tasks, key=lambda x: x[1])
for idx, task in enumerate(tasks):
    if len(schedule) == 0:
        schedule.append([idx])
    else:
        last_sum = 0.0
        for i in range(len(schedule[-1])):
            last_sum += tasks[schedule[-1][i]][2]
        if last_sum + task[2] > 6.0:
            schedule.append([idx])
        else:
            schedule[-1].append(idx)

for i in range(len(schedule)):
    print(f"Day {i+1}")
    for j in range(len(schedule[i])):
        print(tasks[schedule[i][j]][0])
    print('-'*20)
